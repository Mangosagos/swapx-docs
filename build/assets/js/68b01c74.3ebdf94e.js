"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7286],{3036:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"contract/swapx-v3/guides/Implement-A-Swap/multihop-swaps","title":"\u591a\u8df3\u4ea4\u6362","description":"\u4ee5\u4e0b\u793a\u4f8b\u662f v3 \u4e0a\u53ef\u7528\u7684\u4e24\u79cd\u591a\u8df3\u4ea4\u6362\u6837\u5f0f\u7684\u5b9e\u73b0\u3002\u4ee5\u4e0b\u793a\u4f8b\u4e0d\u662f\u53ef\u7528\u4e8e\u751f\u4ea7\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u4ee5\u7b80\u5355\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4ee5\u7528\u4e8e\u5b66\u4e60\u76ee\u7684\u3002","source":"@site/docs/contract/swapx-v3/guides/Implement-A-Swap/multihop-swaps.md","sourceDirName":"contract/swapx-v3/guides/Implement-A-Swap","slug":"/contract/swapx-v3/guides/Implement-A-Swap/multihop-swaps","permalink":"/contract/swapx-v3/guides/Implement-A-Swap/multihop-swaps","draft":false,"unlisted":false,"editUrl":"https://github.com/hi-swapx/docs/docs/contract/swapx-v3/guides/Implement-A-Swap/multihop-swaps.md","tags":[],"version":"current","frontMatter":{},"sidebar":"contractSidebar","previous":{"title":"SwapX V3 \u667a\u80fd\u5408\u7ea6","permalink":"/contract/swapx-v3/overview"},"next":{"title":"\u5355\u7b14\u4ea4\u6362","permalink":"/contract/swapx-v3/guides/Implement-A-Swap/single-swaps"}}');var o=n(4848),s=n(8453);const r={},i="\u591a\u8df3\u4ea4\u6362",u={},p=[{value:"\u7cbe\u786e\u8f93\u5165\u591a\u8df3",id:"\u7cbe\u786e\u8f93\u5165\u591a\u8df3",level:2},{value:"\u8f93\u5165",id:"\u8f93\u5165",level:3},{value:"\u8c03\u7528",id:"\u8c03\u7528",level:3},{value:"\u7cbe\u786e\u8f93\u51fa\u591a\u8df3",id:"\u7cbe\u786e\u8f93\u51fa\u591a\u8df3",level:2},{value:"\u8f93\u5165",id:"\u8f93\u5165-1",level:3},{value:"\u8c03\u7528",id:"\u8c03\u7528-1",level:3},{value:"\u5b8c\u6574",id:"\u5b8c\u6574",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"\u591a\u8df3\u4ea4\u6362",children:"\u591a\u8df3\u4ea4\u6362"})}),"\n",(0,o.jsx)(t.p,{children:"\u4ee5\u4e0b\u793a\u4f8b\u662f v3 \u4e0a\u53ef\u7528\u7684\u4e24\u79cd\u591a\u8df3\u4ea4\u6362\u6837\u5f0f\u7684\u5b9e\u73b0\u3002\u4ee5\u4e0b\u793a\u4f8b\u4e0d\u662f\u53ef\u7528\u4e8e\u751f\u4ea7\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u4ee5\u7b80\u5355\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4ee5\u7528\u4e8e\u5b66\u4e60\u76ee\u7684\u3002"}),"\n",(0,o.jsx)(t.p,{children:"\u58f0\u660e\u5c06\u7528\u4e8e\u7f16\u8bd1\u5408\u7ea6\u7684 solidity \u7248\u672c\uff0c\u5e76 abicoder v2 \u5141\u8bb8\u5728 calldata \u4e2d\u5bf9\u4efb\u610f\u5d4c\u5957\u6570\u7ec4\u548c\u7ed3\u6784\u8fdb\u884c\u7f16\u7801\u548c\u89e3\u7801\uff0c\u8fd9\u662f\u6211\u4eec\u5728\u6267\u884c\u4ea4\u6362\u65f6\u4f7f\u7528\u7684\u529f\u80fd\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n"})}),"\n",(0,o.jsx)(t.p,{children:"\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u7684\u5408\u7ea6 SwapExamples\uff0c\u5e76\u58f0\u660e\u4e00\u4e2a swapRouter \u7c7b\u578b\u7684\u4e0d\u53ef\u53d8\u516c\u5171\u53d8\u91cf ISwapRouter\u3002\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u8c03\u7528 ISwapRouter \u63a5\u53e3\u4e2d\u7684\u51fd\u6570\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"contract SwapExamples {\n    // For the scope of these swap examples,\n    // we will detail the design considerations when using `exactInput`, `exactInputSingle`, `exactOutput`, and  `exactOutputSingle`.\n    // It should be noted that for the sake of these examples we pass in the swap router as a constructor argument instead of inheriting it.\n    // More advanced example contracts will detail how to inherit the swap router safely.\n    // This example swaps DAI/WETH9 for single path swaps and DAI/USDC/WETH9 for multi path swaps.\n\n    ISwapRouter public immutable swapRouter;\n"})}),"\n",(0,o.jsx)(t.p,{children:"\u4e3a\u793a\u4f8b\u786c\u7f16\u7801\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\u548c\u6c60\u8d39\u7528\u7b49\u7ea7\u3002\u5728\u751f\u4ea7\u4e2d\uff0c\u60a8\u53ef\u80fd\u4f1a\u4e3a\u6b64\u4f7f\u7528\u8f93\u5165\u53c2\u6570\u5e76\u5c06\u8f93\u5165\u4f20\u9012\u5230\u5185\u5b58\u53d8\u91cf\u4e2d\uff0c\u4ece\u800c\u5141\u8bb8\u5408\u7ea6\u6839\u636e\u6bcf\u7b14\u4ea4\u6613\u66f4\u6539\u4e0e\u4e4b\u4ea4\u4e92\u7684\u6c60\u548c\u4ee3\u5e01\uff0c\u4f46\u4e3a\u4e86\u6982\u5ff5\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5bf9\u5176\u8fdb\u884c\u786c\u7f16\u7801\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n\n    // For this example, we will set the pool fee to 0.3%.\n    uint24 public constant poolFee = 3000;\n\n    constructor(ISwapRouter _swapRouter) {\n        swapRouter = _swapRouter;\n    }\n"})}),"\n",(0,o.jsx)(t.h2,{id:"\u7cbe\u786e\u8f93\u5165\u591a\u8df3",children:"\u7cbe\u786e\u8f93\u5165\u591a\u8df3"}),"\n",(0,o.jsx)(t.p,{children:"\u7cbe\u786e\u8f93\u5165\u591a\u8df3\u4ea4\u6362\u5c06\u5728\u7ed9\u5b9a\u8f93\u5165\u4ee4\u724c\u4e0a\u4ea4\u6362\u56fa\u5b9a\u6570\u91cf\uff0c\u4ee5\u83b7\u5f97\u7ed9\u5b9a\u8f93\u51fa\u7684\u6700\u5927\u53ef\u80fd\u6570\u91cf\uff0c\u5e76\u4e14\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6570\u91cf\u7684\u4e2d\u95f4\u4ea4\u6362\u3002"}),"\n",(0,o.jsx)(t.h3,{id:"\u8f93\u5165",children:"\u8f93\u5165"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"path\uff1a\u8def\u5f84\u662f\uff08tokenAddress- fee- tokenAddress\uff09\u7684\u5e8f\u5217\uff0c\u8fd9\u4e9b\u53d8\u91cf\u662f\u8ba1\u7b97\u6211\u4eec\u4ea4\u6362\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u6c60\u5408\u7ea6\u5730\u5740\u6240\u9700\u7684\u53d8\u91cf\u3002\u591a\u8df3\u4ea4\u6362\u8def\u7531\u5668\u4ee3\u7801\u5c06\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u81ea\u52a8\u627e\u5230\u6b63\u786e\u7684\u6c60\uff0c\u5e76\u5728\u6211\u4eec\u7684\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u6c60\u4e2d\u6267\u884c\u6240\u9700\u7684\u4ea4\u6362\u3002"}),"\n",(0,o.jsx)(t.li,{children:"recipient\uff1a\u51fa\u7ad9\u8d44\u4ea7\u7684\u76ee\u6807\u5730\u5740\u3002"}),"\n",(0,o.jsx)(t.li,{children:"deadline\uff1a\u4ea4\u6613\u5c06\u88ab\u64a4\u9500\u7684 unix \u65f6\u95f4\uff0c\u4ee5\u9632\u6b62\u957f\u65f6\u95f4\u5ef6\u8fdf\u548c\u5176\u4e2d\u4ef7\u683c\u5927\u5e45\u6ce2\u52a8\u7684\u53ef\u80fd\u6027\u589e\u52a0\u3002"}),"\n",(0,o.jsx)(t.li,{children:"amountIn\uff1a\u5165\u7ad9\u8d44\u4ea7\u7684\u91d1\u989d"}),"\n",(0,o.jsx)(t.li,{children:"amountOutMin\uff1a\u51fa\u7ad9\u8d44\u4ea7\u7684\u6700\u5c0f\u91d1\u989d\uff0c\u4f4e\u4e8e\u6b64\u91d1\u989d\u5c06\u5bfc\u81f4\u4ea4\u6613\u64a4\u9500\u3002\u4e3a\u4e86\u4fbf\u4e8e\u8bf4\u660e\uff0c\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u4e3a 0\uff0c\u5728\u751f\u4ea7\u4e2d\uff0c\u9700\u8981\u4f7f\u7528 SDK \u6765\u5f15\u7528\u9884\u671f\u4ef7\u683c\uff0c\u6216\u8005\u4f7f\u7528\u94fe\u4e0a\u4ef7\u683c\u9884\u8a00\u673a\u6765\u83b7\u5f97\u66f4\u9ad8\u7ea7\u7684\u9632\u64cd\u7eb5\u7cfb\u7edf\u3002"}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"\u8c03\u7528",children:"\u8c03\u7528"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"    /// @notice swapExactInputMultihop swaps a fixed amount of DAI for a maximum possible amount of WETH9 through an intermediary pool.\n    /// For this example, we will swap DAI to USDC, then USDC to WETH9 to achieve our desired output.\n    /// @dev The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.\n    /// @param amountIn The amount of DAI to be swapped.\n    /// @return amountOut The amount of WETH9 received after the swap.\n    function swapExactInputMultihop(uint256 amountIn) external returns (uint256 amountOut) {\n        // Transfer `amountIn` of DAI to this contract.\n        TransferHelper.safeTransferFrom(DAI, msg.sender, address(this), amountIn);\n\n        // Approve the router to spend DAI.\n        TransferHelper.safeApprove(DAI, address(swapRouter), amountIn);\n\n        // Multiple pool swaps are encoded through bytes called a `path`. A path is a sequence of token addresses and poolFees that define the pools used in the swaps.\n        // The format for pool encoding is (tokenIn, fee, tokenOut/tokenIn, fee, tokenOut) where tokenIn/tokenOut parameter is the shared token across the pools.\n        // Since we are swapping DAI to USDC and then USDC to WETH9 the path encoding is (DAI, 0.3%, USDC, 0.3%, WETH9).\n        ISwapRouter.ExactInputParams memory params =\n            ISwapRouter.ExactInputParams({\n                path: abi.encodePacked(DAI, poolFee, USDC, poolFee, WETH9),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountIn: amountIn,\n                amountOutMinimum: 0\n            });\n\n        // Executes the swap.\n        amountOut = swapRouter.exactInput(params);\n    }\n"})}),"\n",(0,o.jsx)(t.h2,{id:"\u7cbe\u786e\u8f93\u51fa\u591a\u8df3",children:"\u7cbe\u786e\u8f93\u51fa\u591a\u8df3"}),"\n",(0,o.jsx)(t.p,{children:"\u7cbe\u786e\u8f93\u51fa\u4ea4\u6362\u5c06\u7528\u53ef\u53d8\u6570\u91cf\u7684\u8f93\u5165\u4ee3\u5e01\u4ea4\u6362\u56fa\u5b9a\u6570\u91cf\u7684\u51fa\u7ad9\u4ee3\u5e01\u3002\u8fd9\u662f\u591a\u8df3\u4ea4\u6362\u4e2d\u4e0d\u592a\u5e38\u89c1\u7684\u6280\u672f\u3002\u4ea4\u6362\u7684\u4ee3\u7801\u5927\u81f4\u76f8\u540c\uff0c\u9664\u4e86\u4e00\u4e2a\u663e\u7740\u7684\u533a\u522b\uff0c\u5373 Path \u662f\u53cd\u5411\u7f16\u7801\u7684\uff0c\u56e0\u4e3a\u7cbe\u786e\u8f93\u51fa\u4ea4\u6362\u662f\u6309\u76f8\u53cd\u987a\u5e8f\u6267\u884c\u7684\uff0c\u4ee5\u4f20\u9012\u4ea4\u6613\u94fe\u6240\u9700\u7684\u53d8\u91cf"}),"\n",(0,o.jsx)(t.h3,{id:"\u8f93\u5165-1",children:"\u8f93\u5165"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"path\uff1a\u8def\u5f84\u662f\u4e00\u7cfb\u5217\u4ee5\u53cd\u5411\u987a\u5e8f\u7f16\u7801 tokenAddress Fee tokenAddress \u7684\uff0c\u8fd9\u4e9b\u662f\u8ba1\u7b97\u6211\u4eec\u4ea4\u6362\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u6c60\u5408\u7ea6\u5730\u5740\u6240\u9700\u7684\u53d8\u91cf\u3002\u591a\u8df3\u4ea4\u6362\u8def\u7531\u5668\u4ee3\u7801\u5c06\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u81ea\u52a8\u627e\u5230\u6b63\u786e\u7684\u6c60\uff0c\u5e76\u5728\u6211\u4eec\u7684\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u6c60\u4e2d\u6267\u884c\u6240\u9700\u7684\u4ea4\u6362\u3002"}),"\n",(0,o.jsx)(t.li,{children:"recipient\uff1a\u51fa\u7ad9\u8d44\u4ea7\u7684\u76ee\u6807\u5730\u5740\u3002"}),"\n",(0,o.jsx)(t.li,{children:"deadline\uff1a\u4ea4\u6613\u5c06\u88ab\u64a4\u9500\u7684 unix \u65f6\u95f4\uff0c\u4ee5\u9632\u6b62\u957f\u65f6\u95f4\u5ef6\u8fdf\u548c\u5176\u4e2d\u4ef7\u683c\u5927\u5e45\u6ce2\u52a8\u7684\u53ef\u80fd\u6027\u589e\u52a0\u3002"}),"\n",(0,o.jsx)(t.li,{children:"amountOut\uff1a\u6240\u9700\u7684 WETH9 \u6570\u91cf\u3002"}),"\n",(0,o.jsx)(t.li,{children:"amountInMaximum\uff1a\u613f\u610f\u4e0e\u6307\u5b9a\u6570\u91cf\u7684 WETH9 \u4ea4\u6362\u7684 DAI \u7684\u6700\u5927\u6570\u91cf\u3002"}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"\u8c03\u7528-1",children:"\u8c03\u7528"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'    /// @notice swapExactOutputMultihop swaps a minimum possible amount of DAI for a fixed amount of WXOC through an intermediary pool.\n    /// For this example, we want to swap DAI for WETH9 through a USDC pool but we specify the desired amountOut of WETH9. Notice how the path encoding is slightly different in for exact output swaps.\n    /// @dev The calling address must approve this contract to spend its DAI for this function to succeed. As the amount of input DAI is variable,\n    /// the calling address will need to approve for a slightly higher amount, anticipating some variance.\n    /// @param amountOut The desired amount of WETH9.\n    /// @param amountInMaximum The maximum amount of DAI willing to be swapped for the specified amountOut of WETH9.\n    /// @return amountIn The amountIn of DAI actually spent to receive the desired amountOut.\n    function swapExactOutputMultihop(uint256 amountOut, uint256 amountInMaximum) external returns (uint256 amountIn) {\n        // Transfer the specified `amountInMaximum` to this contract.\n        TransferHelper.safeTransferFrom(DAI, msg.sender, address(this), amountInMaximum);\n        // Approve the router to spend  `amountInMaximum`.\n        TransferHelper.safeApprove(DAI, address(swapRouter), amountInMaximum);\n\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\n        // The tokenIn/tokenOut field is the shared token between the two pools used in the multiple pool swap. In this case USDC is the "shared" token.\n        // For an exactOutput swap, the first swap that occurs is the swap which returns the eventual desired token.\n        // In this case, our desired output token is WETH9 so that swap happens first, and is encoded in the path accordingly.\n        ISwapRouter.ExactOutputParams memory params =\n            ISwapRouter.ExactOutputParams({\n                path: abi.encodePacked(WETH9, poolFee, USDC, poolFee, DAI),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountOut: amountOut,\n                amountInMaximum: amountInMaximum\n            });\n\n        // Executes the swap, returning the amountIn actually spent.\n        amountIn = swapRouter.exactOutput(params);\n\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\n        if (amountIn < amountInMaximum) {\n            TransferHelper.safeApprove(DAI, address(swapRouter), 0);\n            TransferHelper.safeTransferFrom(DAI, address(this), msg.sender, amountInMaximum - amountIn);\n        }\n    }\n\n'})}),"\n",(0,o.jsx)(t.h2,{id:"\u5b8c\u6574",children:"\u5b8c\u6574"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\n\ncontract SwapExamples {\n    // For the scope of these swap examples,\n    // we will detail the design considerations when using\n    // `exactInput`, `exactInputSingle`, `exactOutput`, and  `exactOutputSingle`.\n\n    // It should be noted that for the sake of these examples, we purposefully pass in the swap router instead of inherit the swap router for simplicity.\n    // More advanced example contracts will detail how to inherit the swap router safely.\n\n    ISwapRouter public immutable swapRouter;\n\n    // This example swaps DAI/WETH9 for single path swaps and DAI/USDC/WETH9 for multi path swaps.\n\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n\n    // For this example, we will set the pool fee to 0.3%.\n    uint24 public constant poolFee = 3000;\n\n    constructor(ISwapRouter _swapRouter) {\n        swapRouter = _swapRouter;\n    }\n\n    /// @notice swapInputMultiplePools swaps a fixed amount of DAI for a maximum possible amount of WETH9 through an intermediary pool.\n    /// For this example, we will swap DAI to USDC, then USDC to WETH9 to achieve our desired output.\n    /// @dev The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.\n    /// @param amountIn The amount of DAI to be swapped.\n    /// @return amountOut The amount of WETH9 received after the swap.\n    function swapExactInputMultihop(uint256 amountIn) external returns (uint256 amountOut) {\n        // Transfer `amountIn` of DAI to this contract.\n        TransferHelper.safeTransferFrom(DAI, msg.sender, address(this), amountIn);\n\n        // Approve the router to spend DAI.\n        TransferHelper.safeApprove(DAI, address(swapRouter), amountIn);\n\n        // Multiple pool swaps are encoded through bytes called a `path`. A path is a sequence of token addresses and poolFees that define the pools used in the swaps.\n        // The format for pool encoding is (tokenIn, fee, tokenOut/tokenIn, fee, tokenOut) where tokenIn/tokenOut parameter is the shared token across the pools.\n        // Since we are swapping DAI to USDC and then USDC to WETH9 the path encoding is (DAI, 0.3%, USDC, 0.3%, WETH9).\n        ISwapRouter.ExactInputParams memory params =\n            ISwapRouter.ExactInputParams({\n                path: abi.encodePacked(DAI, poolFee, USDC, poolFee, WETH9),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountIn: amountIn,\n                amountOutMinimum: 0\n            });\n\n        // Executes the swap.\n        amountOut = swapRouter.exactInput(params);\n    }\n\n    /// @notice swapExactOutputMultihop swaps a minimum possible amount of DAI for a fixed amount of WXOC through an intermediary pool.\n    /// For this example, we want to swap DAI for WETH9 through a USDC pool but we specify the desired amountOut of WETH9. Notice how the path encoding is slightly different in for exact output swaps.\n    /// @dev The calling address must approve this contract to spend its DAI for this function to succeed. As the amount of input DAI is variable,\n    /// the calling address will need to approve for a slightly higher amount, anticipating some variance.\n    /// @param amountOut The desired amount of WETH9.\n    /// @param amountInMaximum The maximum amount of DAI willing to be swapped for the specified amountOut of WETH9.\n    /// @return amountIn The amountIn of DAI actually spent to receive the desired amountOut.\n    function swapExactOutputMultihop(uint256 amountOut, uint256 amountInMaximum) external returns (uint256 amountIn) {\n        // Transfer the specified `amountInMaximum` to this contract.\n        TransferHelper.safeTransferFrom(DAI, msg.sender, address(this), amountInMaximum);\n        // Approve the router to spend  `amountInMaximum`.\n        TransferHelper.safeApprove(DAI, address(swapRouter), amountInMaximum);\n\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\n        // The tokenIn/tokenOut field is the shared token between the two pools used in the multiple pool swap. In this case USDC is the "shared" token.\n        // For an exactOutput swap, the first swap that occurs is the swap which returns the eventual desired token.\n        // In this case, our desired output token is WETH9 so that swap happpens first, and is encoded in the path accordingly.\n        ISwapRouter.ExactOutputParams memory params =\n            ISwapRouter.ExactOutputParams({\n                path: abi.encodePacked(WETH9, poolFee, USDC, poolFee, DAI),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountOut: amountOut,\n                amountInMaximum: amountInMaximum\n            });\n\n        // Executes the swap, returning the amountIn actually spent.\n        amountIn = swapRouter.exactOutput(params);\n\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\n        if (amountIn < amountInMaximum) {\n            TransferHelper.safeApprove(DAI, address(swapRouter), 0);\n            TransferHelper.safeTransferFrom(DAI, address(this), msg.sender, amountInMaximum - amountIn);\n        }\n    }\n}\n'})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(6540);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);