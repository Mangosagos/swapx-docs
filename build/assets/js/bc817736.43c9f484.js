"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9054],{1095:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"sdk/v2/guides/fetching-data","title":"fetching-data","description":"Looking for a quickstart?","source":"@site/docs/sdk/v2/guides/02-fetching-data.md","sourceDirName":"sdk/v2/guides","slug":"/sdk/v2/guides/fetching-data","permalink":"/sdk/v2/guides/fetching-data","draft":false,"unlisted":false,"editUrl":"https://github.com/hi-swapx/docs/docs/sdk/v2/guides/02-fetching-data.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"\u7b2c\u4e8c\u6b65\uff1a\u83b7\u53d6\u6570\u636e","sidebar_position":2},"sidebar":"sdkSidebar","previous":{"title":"\u7b2c\u4e00\u6b65\uff1a\u5feb\u901f\u542f\u52a8","permalink":"/sdk/v2/guides/quick-start"},"next":{"title":"\u7b2c\u4e09\u6b65\uff1a\u5b9a\u4ef7","permalink":"/sdk/v2/guides/pricing"}}');var r=t(4848),a=t(8453);const i={sidebar_label:"\u7b2c\u4e8c\u6b65\uff1a\u83b7\u53d6\u6570\u636e",sidebar_position:2},o="Case 1: Tokens",d={},c=[{value:"Identifying Data",id:"identifying-data",level:2},{value:"Required Data",id:"required-data",level:2},{value:"Provided by the User",id:"provided-by-the-user",level:3},{value:"Optional Data",id:"optional-data",level:2},{value:"Identifying Data",id:"identifying-data-1",level:2},{value:"Required Data",id:"required-data-1",level:2},{value:"Provided by the User",id:"provided-by-the-user-1",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Looking for a ",(0,r.jsx)(n.a,{href:"quick-start",children:"quickstart"}),"?"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["While the SDK is fully self-contained, there are two cases where it needs ",(0,r.jsx)(n.em,{children:"on-chain data"})," to function.\nThis guide will detail both of these cases, and offer a sample that you can use to fetch this data."]}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"case-1-tokens",children:"Case 1: Tokens"})}),"\n",(0,r.jsxs)(n.p,{children:["Unsurprisingly, the SDK needs some notion of an ERC-20 token to be able to function. This immediately raises the question of ",(0,r.jsx)(n.em,{children:"where data about tokens comes from"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["As an example, let's try to represent DAI in a format the SDK can work with. To do so, we need at least 3 pieces of data: a ",(0,r.jsx)(n.strong,{children:"chainId"}),", a ",(0,r.jsx)(n.strong,{children:"token address"}),", and how many ",(0,r.jsx)(n.strong,{children:"decimals"})," the token has. We also may be interested in the ",(0,r.jsx)(n.strong,{children:"symbol"})," and/or ",(0,r.jsx)(n.strong,{children:"name"})," of the token."]}),"\n",(0,r.jsx)(n.h2,{id:"identifying-data",children:"Identifying Data"}),"\n",(0,r.jsxs)(n.p,{children:["The first two pieces of data \u2014 ",(0,r.jsx)(n.strong,{children:"chainId"})," and ",(0,r.jsx)(n.strong,{children:"token address"})," \u2014 must be provided by us. Thinking about it, this makes sense, as there's really no other way to unambiguously identify a token."]}),"\n",(0,r.jsxs)(n.p,{children:["So, in the case of DAI, we know that the ",(0,r.jsx)(n.strong,{children:"chainId"})," is ",(0,r.jsx)(n.code,{children:"1"})," (we're on mainnet), and the ",(0,r.jsx)(n.strong,{children:"token address"})," is ",(0,r.jsx)(n.code,{children:"0x6B175474E89094C44Da98b954EedeAC495271d0F"}),". Note that it's very important to externally verify token addresses. Don't use addresses from sources you don't trust!"]}),"\n",(0,r.jsx)(n.h2,{id:"required-data",children:"Required Data"}),"\n",(0,r.jsxs)(n.p,{children:["The next piece of data we need is ",(0,r.jsx)(n.strong,{children:"decimals"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"provided-by-the-user",children:"Provided by the User"}),"\n",(0,r.jsxs)(n.p,{children:["One option here is to simply pass in the correct value, which we may know is ",(0,r.jsx)(n.code,{children:"18"}),". At this point, we're ready to represent DAI as a ",(0,r.jsx)(n.a,{href:"core/reference/classes/Token",children:"Token"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { ChainId, Token } from "@swapx/sdk-core";\n\nconst chainId = ChainId.MAINNET;\nconst tokenAddress = "0x6B175474E89094C44Da98b954EedeAC495271d0F"; // must be checksummed\nconst decimals = 18;\n\nconst DAI = new Token(chainId, tokenAddress, decimals);\n'})}),"\n",(0,r.jsx)(n.p,{children:"If we don't know or don't want to hardcode the value, we could look it up ourselves via any method of retrieving on-chain data in a function that looks something like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { ChainId } from "@swapx/sdk-core";\n\nasync function getDecimals(\n  chainId: ChainId,\n  tokenAddress: string\n): Promise<number> {\n  // Setup provider, import necessary ABI ...\n  const tokenContract = new ethers.Contract(tokenAddress, erc20abi, provider);\n  return tokenContract["decimals"]();\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"optional-data",children:"Optional Data"}),"\n",(0,r.jsxs)(n.p,{children:["Finally, we can talk about ",(0,r.jsx)(n.strong,{children:"symbol"})," and ",(0,r.jsx)(n.strong,{children:"name"}),". Because these fields aren't used anywhere in the SDK itself, they're optional, and can be provided if you want to use them in your application. However, the SDK will not fetch them for you, so you'll have to provide them:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { ChainId, Token } from "@swapx/sdk-core";\n\nconst DAI = new Token(\n  ChainId.MAINNET,\n  "0x6B175474E89094C44Da98b954EedeAC495271d0F",\n  18,\n  "DAI",\n  "Dai Stablecoin"\n);\n'})}),"\n",(0,r.jsx)(n.h1,{id:"case-2-pairs",children:"Case 2: Pairs"}),"\n",(0,r.jsxs)(n.p,{children:["Now that we've explored how to define a token, let's talk about pairs. To read more about what SwapX pairs are, see ",(0,r.jsx)(n.a,{href:"contracts/v2/reference/smart-contracts/pair",children:"Pair"})]}),"\n",(0,r.jsx)(n.p,{children:"As an example, let's try to represent the DAI-WETH pair."}),"\n",(0,r.jsx)(n.h2,{id:"identifying-data-1",children:"Identifying Data"}),"\n",(0,r.jsxs)(n.p,{children:["Each pair consists of two tokens (see previous section). Note that WETH used by the router is ",(0,r.jsx)(n.a,{href:"core/reference/overview",children:"exported by the SDK Core as WETH9"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"required-data-1",children:"Required Data"}),"\n",(0,r.jsxs)(n.p,{children:["The data we need is the ",(0,r.jsx)(n.em,{children:"reserves"})," of the pair. To read more about reserves, see ",(0,r.jsx)(n.a,{href:"contracts/v2/reference/smart-contracts/pair#getreserves",children:"getReserves"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"provided-by-the-user-1",children:"Provided by the User"}),"\n",(0,r.jsxs)(n.p,{children:["One option here is to simply pass in values which we've fetched ourselves to create a ",(0,r.jsx)(n.a,{href:"reference/pair",children:"Pair"}),". In this example we use ethers to fetch the data directly from the blockchain:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { ChainId, Token, WETH9, CurrencyAmount } from "@swapx/sdk-core";\nimport { Pair } from "@swapx/v2-sdk";\n\nconst DAI = new Token(\n  ChainId.MAINNET,\n  "0x6B175474E89094C44Da98b954EedeAC495271d0F",\n  18\n);\n\nasync function createPair(): Promise<Pair> {\n  const pairAddress = Pair.getAddress(DAI, WETH9[DAI.chainId]);\n\n  // Setup provider, import necessary ABI ...\n  const pairContract = new ethers.Contract(\n    pairAddress,\n    SwapXV2poolABI,\n    provider\n  );\n  const reserves = await pairContract["getReserves"]();\n  const [reserve0, reserve1] = reserves;\n\n  const tokens = [DAI, WETH9[DAI.chainId]];\n  const [token0, token1] = tokens[0].sortsBefore(tokens[1])\n    ? tokens\n    : [tokens[1], tokens[0]];\n\n  const pair = new Pair(\n    CurrencyAmount.fromRawAmount(token0, reserve0),\n    CurrencyAmount.fromRawAmount(token1, reserve1)\n  );\n  return pair;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Note that these values can change as frequently as every block, and should be kept up-to-date."})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);